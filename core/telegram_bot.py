import requests
from typing import Optional
from utils.logger import TradingLogger
from tkinter import messagebox
from datetime import datetime

class TelegramBot:
    def __init__(self, logger: TradingLogger, token: str = None, chat_id: str = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞

        :param logger: –û–±—ä–µ–∫—Ç –ª–æ–≥–≥–µ—Ä–∞
        """
        self.logger = logger.logger  # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä
        self.token = token
        self.chat_id = chat_id
        self.enabled = False
        self.logger = logger.logger  # –ü–æ–ª—É—á–∞–µ–º logging.Logger
        self.bot = None

    def initialize(self, token: str, chat_id: str) -> bool:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–æ–∫–µ–Ω–∞ –∏ chat_id

        :param token: –¢–æ–∫–µ–Ω –±–æ—Ç–∞
        :param chat_id: ID —á–∞—Ç–∞
        :return: –£—Å–ø–µ—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        """
        if not token or not chat_id:
            self.logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Telegram –±–æ—Ç –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ chat_id")
            return False

        self.token = token
        self.chat_id = chat_id
        self.enabled = True
        self.logger.info("Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return True

    def send_message(self, text: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram

        :param text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        :return: –£—Å–ø–µ—Ö –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        if not self.enabled:
            self.logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Telegram –±–æ—Ç")
            return False

        url = f"https://api.telegram.org/bot{self.token}/sendMessage"
        params = {
            'chat_id': self.chat_id,
            'text': text,
            'parse_mode': 'HTML'
        }

        try:
            response = requests.post(url, params=params, timeout=10)

            if response.status_code == 200:
                self.logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram: {text[:50]}...")
                return True

            error_msg = f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {response.status_code} - {response.text}"
            self.logger.error(error_msg)

            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            if response.status_code == 502:
                self.logger.warning("–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç 502 –æ—Ç Telegram API. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞...")
                response = requests.post(url, params=params, timeout=10)
                if response.status_code == 200:
                    self.logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏")
                    return True
                self.logger.error(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {response.status_code} - {response.text}")

            return False

        except requests.exceptions.RequestException as e:
            self.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API: {str(e)}")
            return False

    def notify_trade_opened(self, symbol: str, action: str, volume: float,
                            price: float, stop_loss: float, take_profit: float,
                            strategy: str) -> bool:
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–∫–∏

        :param symbol: –°–∏–º–≤–æ–ª
        :param action: –î–µ–π—Å—Ç–≤–∏–µ ('buy'/'sell')
        :param volume: –û–±—ä–µ–º
        :param price: –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞
        :param stop_loss: Stop Loss
        :param take_profit: Take Profit
        :param strategy: –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        :return: –£—Å–ø–µ—Ö –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        if not self.enabled:
            self.logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Telegram –±–æ—Ç")
            return False

        try:
            emoji = "üìà" if action.lower() in ['buy', '–ø–æ–∫—É–ø–∫–∞'] else "üìâ"
            message = (
                f"<b>{emoji} –û—Ç–∫—Ä—ã—Ç–∞ —Å–¥–µ–ª–∫–∞</b>\n"
                f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è: <code>{strategy}</code>\n"
                f"–°–∏–º–≤–æ–ª: <code>{symbol}</code>\n"
                f"–î–µ–π—Å—Ç–≤–∏–µ: <code>{'–ü–æ–∫—É–ø–∫–∞' if action == 'buy' else '–ü—Ä–æ–¥–∞–∂–∞'}</code>\n"
                f"–û–±—ä–µ–º: <code>{volume:.2f}</code>\n"
                f"–¶–µ–Ω–∞: <code>{price:.5f}</code>\n"
                f"–°—Ç–æ–ø-–ª–æ—Å—Å: <code>{stop_loss:.5f}</code>\n"
                f"–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: <code>{take_profit:.5f}</code>"
            )
            return self.send_message(message)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–∫–∏: {str(e)}")
            return False

    def notify_trade_closed(self, symbol: str, position_id: int,
                            profit: float, price: float, reason: str) -> bool:
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–∫–∏

        :param symbol: –°–∏–º–≤–æ–ª
        :param position_id: ID –ø–æ–∑–∏—Ü–∏–∏
        :param profit: –ü—Ä–∏–±—ã–ª—å
        :param price: –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        :param reason: –ü—Ä–∏—á–∏–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        :return: –£—Å–ø–µ—Ö –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        if not self.enabled:
            self.logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–∫–∏ –±–µ–∑ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞")
            return False

        try:
            emoji = "üü¢" if profit >= 0 else "üî¥"
            color = "green" if profit >= 0 else "red"
            message = (
                f"<b>üìâ –ó–∞–∫—Ä—ã—Ç–∞ —Å–¥–µ–ª–∫–∞</b>\n"
                f"–°–∏–º–≤–æ–ª: <code>{symbol}</code>\n"
                f"ID –ø–æ–∑–∏—Ü–∏–∏: <code>{position_id}</code>\n"
                f"–ü—Ä–∏–±—ã–ª—å: <font color='{color}'>{profit:.2f}</font>\n"
                f"–¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: <code>{price:.5f}</code>\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: <code>{reason}</code>"
            )
            return self.send_message(message)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–∫–∏: {str(e)}")
            return False

    def notify_error(self, error_message: str) -> bool:
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ

        :param error_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        :return: –£—Å–ø–µ—Ö –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        if not self.enabled:
            self.logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –±–µ–∑ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞")
            return False

        try:
            message = (
                f"<b>‚ö†Ô∏è –û—à–∏–±–∫–∞</b>\n"
                f"<code>{error_message}</code>"
            )
            return self.send_message(message)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {str(e)}")
            return False

    def send_daily_report(self, database) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞

        :param database: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        :return: –£—Å–ø–µ—Ö –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        if not self.enabled:
            self.logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –±–µ–∑ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞")
            return False

        if not hasattr(database, 'get_trades'):
            self.logger.warning("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫")
            return False

        stats = {
            'day': datetime.now().strftime('%Y-%m-%d'),
            'trades': database.get_trades(limit=100),
            'summary': {
                'total': 0,
                'profit': 0.0
            }
        }

        for trade in stats['trades']:
            if trade['exit_time'].date() == datetime.now().date():
                stats['summary']['total'] += 1
                stats['summary']['profit'] += trade['profit']

        message = (
            f"üìä –û—Ç—á–µ—Ç –∑–∞ {stats['day']}\n"
            f"–°–¥–µ–ª–æ–∫: {stats['summary']['total']}\n"
            f"–ü—Ä–∏–±—ã–ª—å: {stats['summary']['profit']:.2f}"
        )

        return self.send_message(message)