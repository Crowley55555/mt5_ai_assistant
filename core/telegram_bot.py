import requests
from typing import Optional, Dict, Any
from datetime import datetime
from dataclasses import dataclass
from utils.logger import TradingLogger
from utils.exceptions import TelegramError
from requests.exceptions import RequestException


@dataclass
class TradeNotification:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ—Ä–≥–æ–≤–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏"""
    symbol: str
    action: str
    volume: float
    price: float
    stop_loss: Optional[float] = None
    take_profit: Optional[float] = None
    strategy: Optional[str] = None
    position_id: Optional[int] = None
    profit: Optional[float] = None
    reason: Optional[str] = None


class TelegramBot:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API"""

    BASE_API_URL = "https://api.telegram.org/bot{token}/sendMessage"
    REQUEST_TIMEOUT = 10
    MAX_RETRIES = 2

    def __init__(self, logger: TradingLogger):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞

        Args:
            logger: –û–±—ä–µ–∫—Ç –ª–æ–≥–≥–µ—Ä–∞ TradingLogger
        """
        self.logger = logger
        self._token = None
        self._chat_id = None
        self._enabled = False

    @property
    def is_initialized(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞"""
        return self._enabled and self._token and self._chat_id

    def initialize(self, token: str, chat_id: str) -> bool:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–æ–∫–µ–Ω–∞ –∏ chat_id

        Args:
            token: –¢–æ–∫–µ–Ω –±–æ—Ç–∞
            chat_id: ID —á–∞—Ç–∞

        Returns:
            bool: –£—Å–ø–µ—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        """
        if not all(isinstance(x, str) for x in [token, chat_id]):
            self.logger.warning("Invalid token or chat_id format")
            return False

        self._token = token
        self._chat_id = chat_id
        self._enabled = True
        self.logger.info("Telegram bot initialized successfully")
        return True

    def send_message(self, text: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram

        Args:
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è

        Returns:
            bool: –£—Å–ø–µ—Ö –æ—Ç–ø—Ä–∞–≤–∫–∏

        Raises:
            TelegramError: –ü—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
        """
        if not self.is_initialized:
            self.logger.warning("Attempt to send message via uninitialized bot")
            return False

        url = self.BASE_API_URL.format(token=self._token)
        params = {
            'chat_id': self._chat_id,
            'text': text,
            'parse_mode': 'HTML'
        }

        for attempt in range(self.MAX_RETRIES + 1):
            try:
                response = requests.post(
                    url,
                    params=params,
                    timeout=self.REQUEST_TIMEOUT
                )
                response.raise_for_status()

                self.logger.debug(f"Message sent to Telegram: {text[:50]}...")
                return True

            except RequestException as e:
                if attempt == self.MAX_RETRIES:
                    error_msg = f"Failed to send Telegram message after {self.MAX_RETRIES} attempts: {str(e)}"
                    self.logger.error(error_msg)
                    raise TelegramError(error_msg)
                continue

        return False

    def notify_trade(self, trade: TradeNotification) -> bool:
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏

        Args:
            trade: –û–±—ä–µ–∫—Ç TradeNotification —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Å–¥–µ–ª–∫–µ

        Returns:
            bool: –£—Å–ø–µ—Ö –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        if not self.is_initialized:
            self.logger.warning("Attempt to send trade notification via uninitialized bot")
            return False

        try:
            if trade.profit is not None:
                return self._send_trade_close_notification(trade)
            return self._send_trade_open_notification(trade)
        except Exception as e:
            self.logger.error(f"Error forming trade notification: {str(e)}")
            return False

    def _send_trade_open_notification(self, trade: TradeNotification) -> bool:
        """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–∫–∏"""
        emoji = "üìà" if trade.action.lower() in ['buy', '–ø–æ–∫—É–ø–∫–∞'] else "üìâ"
        action_text = '–ü–æ–∫—É–ø–∫–∞' if trade.action == 'buy' else '–ü—Ä–æ–¥–∞–∂–∞'

        message = (
            f"<b>{emoji} –û—Ç–∫—Ä—ã—Ç–∞ —Å–¥–µ–ª–∫–∞</b>\n"
            f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è: <code>{trade.strategy}</code>\n"
            f"–°–∏–º–≤–æ–ª: <code>{trade.symbol}</code>\n"
            f"–î–µ–π—Å—Ç–≤–∏–µ: <code>{action_text}</code>\n"
            f"–û–±—ä–µ–º: <code>{trade.volume:.2f}</code>\n"
            f"–¶–µ–Ω–∞: <code>{trade.price:.5f}</code>\n"
            f"–°—Ç–æ–ø-–ª–æ—Å—Å: <code>{trade.stop_loss:.5f}</code>\n"
            f"–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: <code>{trade.take_profit:.5f}</code>"
        )
        return self.send_message(message)

    def _send_trade_close_notification(self, trade: TradeNotification) -> bool:
        """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–∫–∏"""
        emoji = "üü¢" if trade.profit >= 0 else "üî¥"
        color = "green" if trade.profit >= 0 else "red"

        message = (
            f"<b>üìâ –ó–∞–∫—Ä—ã—Ç–∞ —Å–¥–µ–ª–∫–∞</b>\n"
            f"–°–∏–º–≤–æ–ª: <code>{trade.symbol}</code>\n"
            f"ID –ø–æ–∑–∏—Ü–∏–∏: <code>{trade.position_id}</code>\n"
            f"–ü—Ä–∏–±—ã–ª—å: <font color='{color}'>{trade.profit:.2f}</font>\n"
            f"–¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: <code>{trade.price:.5f}</code>\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: <code>{trade.reason}</code>"
        )
        return self.send_message(message)

    def notify_error(self, error_message: str) -> bool:
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ

        Args:
            error_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ

        Returns:
            bool: –£—Å–ø–µ—Ö –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        message = f"<b>‚ö†Ô∏è –û—à–∏–±–∫–∞</b>\n<code>{error_message}</code>"
        return self.send_message(message)

    def send_daily_report(self, trades_data: Dict[str, Any]) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞

        Args:
            trades_data: –î–∞–Ω–Ω—ã–µ –æ —Å–¥–µ–ª–∫–∞—Ö –∑–∞ –¥–µ–Ω—å

        Returns:
            bool: –£—Å–ø–µ—Ö –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        if not trades_data or 'summary' not in trades_data:
            self.logger.warning("Invalid trades data format for daily report")
            return False

        message = (
            f"üìä –û—Ç—á–µ—Ç –∑–∞ {trades_data.get('day', 'N/A')}\n"
            f"–°–¥–µ–ª–æ–∫: {trades_data['summary'].get('total', 0)}\n"
            f"–ü—Ä–∏–±—ã–ª—å: {trades_data['summary'].get('profit', 0):.2f}"
        )
        return self.send_message(message)