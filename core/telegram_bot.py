import requests
from typing import Optional
from utils.logger import TradingLogger


class TelegramBot:
    def __init__(self, token: str, chat_id: str, logger: TradingLogger):
        self.token = token
        self.chat_id = chat_id
        self.logger = logger
        self.base_url = f"https://api.telegram.org/bot{self.token}"

    def send_message(self, text: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        if not self.token or not self.chat_id:
            self.logger.warning("–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Ç–æ–∫–µ–Ω –∏–ª–∏ chat_id –¥–ª—è Telegram –±–æ—Ç–∞")
            return False

        url = f"{self.base_url}/sendMessage"
        params = {
            'chat_id': self.chat_id,
            'text': text,
            'parse_mode': 'HTML'
        }

        try:
            response = requests.post(url, params=params)
            if response.status_code == 200:
                self.logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram: {text}")
                return True
            else:
                self.logger.error(
                    f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {response.status_code} - {response.text}"
                )
                return False
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API: {str(e)}")
            return False

    def notify_trade_opened(self, symbol: str, action: str, volume: float,
                            price: float, stop_loss: float, take_profit: float,
                            strategy: str) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–∫–∏"""
        message = (
            f"<b>üìà –û—Ç–∫—Ä—ã—Ç–∞ —Å–¥–µ–ª–∫–∞</b>\n"
            f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è: <code>{strategy}</code>\n"
            f"–°–∏–º–≤–æ–ª: <code>{symbol}</code>\n"
            f"–î–µ–π—Å—Ç–≤–∏–µ: <code>{'–ü–æ–∫—É–ø–∫–∞' if action == 'buy' else '–ü—Ä–æ–¥–∞–∂–∞'}</code>\n"
            f"–û–±—ä–µ–º: <code>{volume:.2f}</code>\n"
            f"–¶–µ–Ω–∞: <code>{price:.5f}</code>\n"
            f"–°—Ç–æ–ø-–ª–æ—Å—Å: <code>{stop_loss:.5f}</code>\n"
            f"–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: <code>{take_profit:.5f}</code>"
        )
        return self.send_message(message)

    def notify_trade_closed(self, symbol: str, position_id: int,
                            profit: float, price: float, reason: str) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–∫–∏"""
        profit_color = "üü¢" if profit >= 0 else "üî¥"
        message = (
            f"<b>üìâ –ó–∞–∫—Ä—ã—Ç–∞ —Å–¥–µ–ª–∫–∞</b>\n"
            f"–°–∏–º–≤–æ–ª: <code>{symbol}</code>\n"
            f"ID –ø–æ–∑–∏—Ü–∏–∏: <code>{position_id}</code>\n"
            f"–ü—Ä–∏–±—ã–ª—å: {profit_color} <code>{profit:.2f}</code>\n"
            f"–¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: <code>{price:.5f}</code>\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: <code>{reason}</code>"
        )
        return self.send_message(message)

    def notify_error(self, error_message: str) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        message = f"<b>‚ö†Ô∏è –û—à–∏–±–∫–∞</b>\n<code>{error_message}</code>"
        return self.send_message(message)

    python

    def send_daily_report(self, database: MarketDatabase):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ Telegram"""
        if not database or not self.chat_id:
            return False

        stats = {
            'day': datetime.now().strftime('%Y-%m-%d'),
            'trades': database.get_trades(limit=100),
            'summary': {
                'total': 0,
                'profit': 0.0
            }
        }

        for trade in stats['trades']:
            if trade['exit_time'].date() == datetime.now().date():
                stats['summary']['total'] += 1
                stats['summary']['profit'] += trade['profit']

        message = (
            f"üìä –û—Ç—á–µ—Ç –∑–∞ {stats['day']}\n"
            f"–°–¥–µ–ª–æ–∫: {stats['summary']['total']}\n"
            f"–ü—Ä–∏–±—ã–ª—å: {stats['summary']['profit']:.2f}"
        )
        return self.send_message(message)